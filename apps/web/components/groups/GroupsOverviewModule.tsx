'use client';

import Link from 'next/link';
import React, { useMemo } from 'react';
import { useQuery } from '@tanstack/react-query';

import PageLayout from '../PageLayout';
import { ApiError, apiFetch } from '../../lib/api';
import type { GroupInfo } from '../../lib/types';
import { Badge, Card, EmptyState, TermHint, Toolbar } from '../ui';

const MODULE_TITLE = '–¢–µ–ª–µ–≥—Ä–∞–º‚Äë–≥—Ä—É–ø–ø—ã';
const MODULE_DESCRIPTION =
  '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é —á–∞—Ç–æ–≤, –Ω–∞—á–∏—Å–ª—è–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ–±—É—á–∞—é—â–∏–º–∏—Å—è –ø—Ä—è–º–æ –∏–∑ CRM‚Äë–ø–∞–Ω–µ–ª–∏.';
const TELEGRAM_ID_HINT = 'Telegram ID ‚Äî —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞. –ï–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /group –≤ @intDataBot.';
const CRM_HINT = 'CRM ‚Äî –µ–¥–∏–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –º—ã –≤–∏–¥–∏–º –ø–æ–∫—É–ø–∫–∏, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç—É—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø.';

function useGroupsOverview() {
  return useQuery<GroupInfo[]>({
    queryKey: ['groups', 'overview'],
    staleTime: 30_000,
    gcTime: 5 * 60_000,
    queryFn: () => apiFetch<GroupInfo[]>('/api/v1/groups'),
  });
}

const NUMBER_FORMAT = new Intl.NumberFormat('ru-RU');

export default function GroupsOverviewModule() {
  const query = useGroupsOverview();
  const groups = useMemo(() => query.data ?? [], [query.data]);
  const isLoading = query.isLoading;
  const error = query.error as unknown;

  const errorMessage = error
    ? error instanceof ApiError
      ? error.message
      : '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø.'
    : null;

  const requiresTelegramLink = error instanceof ApiError && error.status === 400;
  const noGroups = !isLoading && !errorMessage && groups.length === 0;

  return (
    <PageLayout
      title={MODULE_TITLE}
      description={
        <span className="inline-flex items-center gap-2 text-sm text-muted">
          <span>{MODULE_DESCRIPTION}</span>
          <TermHint label="CRM" description={CRM_HINT} icon={false} className="text-sm text-muted" />
        </span>
      }
      contentClassName="flex flex-col gap-6"
    >
      <Toolbar className="justify-between">
        <span className="text-sm text-muted">
          {isLoading ? '–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ‚Ä¶' : `–í—Å–µ–≥–æ –≥—Ä—É–ø–ø: ${NUMBER_FORMAT.format(groups.length)}`}
        </span>
        <button
          type="button"
          onClick={() => query.refetch()}
          className="rounded-full border border-subtle px-3 py-1 text-xs font-medium text-[var(--text-primary)] transition-base hover:border-[var(--accent-primary)]"
          disabled={query.isFetching}
        >
          {query.isFetching ? '–û–±–Ω–æ–≤–ª—è–µ–º‚Ä¶' : '–û–±–Ω–æ–≤–∏—Ç—å'}
        </button>
      </Toolbar>

      {errorMessage ? (
        <Card className="border-red-200 bg-red-50 text-sm text-red-600" role="alert">
          {errorMessage}
          {requiresTelegramLink ? (
            <p className="mt-2 text-xs text-red-600/90">
              –°–≤—è–∂–∏—Ç–µ Telegram‚Äë–∞–∫–∫–∞—É–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code className="rounded bg-white/60 px-1">/group</code> –≤ @intDataBot.
            </p>
          ) : null}
        </Card>
      ) : null}

      {isLoading ? (
        <div className="grid gap-4 md:grid-cols-2 xl:grid-cols-3" data-testid="groups-skeleton">
          {Array.from({ length: 6 }).map((_, idx) => (
            <Card key={idx} className="h-40 animate-pulse bg-surface-soft" />
          ))}
        </div>
      ) : noGroups ? (
        <EmptyState
          title="–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
          description="–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @intDataBot –≤ —á–∞—Ç –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /group, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ –∫ CRM."
          icon="üí¨"
        />
      ) : (
        <div className="grid gap-4 md:grid-cols-2 xl:grid-cols-3">
          {groups.map((group) => (
            <Card key={group.telegram_id} as="article" className="flex flex-col gap-4 p-6">
              <header className="flex flex-col gap-2">
                <h2 className="text-lg font-semibold text-[var(--text-primary)]">{group.title}</h2>
                <p className="text-sm text-muted">{group.description ?? '–û–ø–∏—Å–∞–Ω–∏–µ –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.'}</p>
              </header>
              <div className="flex flex-wrap items-center gap-2 text-xs text-muted">
                <Badge tone="neutral" size="sm" uppercase={false}>
                  {NUMBER_FORMAT.format(group.participants_count)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                </Badge>
                <span className="inline-flex items-center gap-1">
                  <TermHint
                    label={<span className="underline decoration-dotted underline-offset-4">Telegram ID</span>}
                    description={TELEGRAM_ID_HINT}
                    icon={false}
                    className="text-xs text-muted"
                  />
                  <code className="rounded-full bg-surface-soft px-2 py-0.5 font-mono text-[0.65rem] text-muted">
                    {group.telegram_id}
                  </code>
                </span>
              </div>
              <div className="mt-auto flex items-center justify-between">
                <Link
                  href={`/groups/manage/${group.telegram_id}`}
                  className="inline-flex items-center gap-2 text-sm font-medium text-[var(--accent-primary)] hover:underline"
                  prefetch={false}
                >
                  –£–ø—Ä–∞–≤–ª—è—Ç—å –≥—Ä—É–ø–ø–æ–π
                  <span aria-hidden>‚Üí</span>
                </Link>
              </div>
            </Card>
          ))}
        </div>
      )}
    </PageLayout>
  );
}
