'use client';

import React, { useMemo, useState } from 'react';
import { useMutation, useQuery } from '@tanstack/react-query';

import PageLayout from '../../PageLayout';
import { apiFetch, ApiError } from '../../../lib/api';
import { Card, EmptyState, Field, Input, TermHint, Toolbar, Button, Select } from '../../ui';

const MODULE_TITLE = 'CRM ¬∑ –ü—Ä–æ–¥—É–∫—Ç—ã, —Ç–∞—Ä–∏—Ñ—ã –∏ –ø–æ—Ç–æ–∫–∏';
const MODULE_DESCRIPTION =
  '–ö–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å–æ–≤, —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –ø—Ä–æ–≥—Ä–∞–º–º Intelligent Data Pro. –ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ PARA –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞—Ä–∏—Ñ—ã, –ø–æ—Ç–æ–∫–∏ (–≤–µ—Ä—Å–∏–∏) –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.';

interface CRMProductVersion {
  id: number;
  slug: string;
  title: string;
  pricing_mode: string;
  starts_at: string | null;
  ends_at: string | null;
  seats_limit: number | null;
  area_id: number | null;
  project_id: number | null;
  config: Record<string, unknown>;
}

interface CRMTariff {
  id: number;
  slug: string;
  title: string;
  billing_type: string;
  amount: number | null;
  currency: string;
  is_active: boolean;
  version_id: number | null;
  config: Record<string, unknown>;
}

interface CRMProductItem {
  id: number;
  slug: string;
  title: string;
  summary: string | null;
  kind: string;
  area_id: number | null;
  project_id: number | null;
  is_active: boolean;
  config: Record<string, unknown>;
  versions: CRMProductVersion[];
  tariffs: CRMTariff[];
}

interface SubscriptionTransitionResponse {
  subscription_id: number;
  status: string;
  transition_type: string;
}

function useCrmProducts() {
  return useQuery<CRMProductItem[]>({
    queryKey: ['crm', 'products'],
    queryFn: () => apiFetch<CRMProductItem[]>('/api/v1/crm/products'),
    staleTime: 60_000,
  });
}

function formatDate(value: string | null): string {
  if (!value) {
    return '‚Äî';
  }
  return new Intl.DateTimeFormat('ru-RU', {
    day: '2-digit',
    month: 'short',
    year: 'numeric',
  }).format(new Date(value));
}

const TRANSITION_LABELS: Record<string, string> = {
  free: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø',
  upgrade: '–ü–ª–∞—Ç–Ω—ã–π –∞–ø–≥—Ä–µ–π–¥',
  downgrade: '–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Ç–∞—Ä–∏—Ñ',
};

export default function CRMProductsModule() {
  const [search, setSearch] = useState('');
  const [selectedSlug, setSelectedSlug] = useState<string | null>(null);
  const [transitionType, setTransitionType] = useState<'free' | 'upgrade' | 'downgrade'>('free');
  const [webUserId, setWebUserId] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [fullName, setFullName] = useState('');

  const productsQuery = useCrmProducts();
  const products = useMemo(() => productsQuery.data ?? [], [productsQuery.data]);
  const filtered = useMemo(() => {
    const text = search.trim().toLowerCase();
    if (!text) {
      return products;
    }
    return products.filter((product) => {
      return (
        product.title.toLowerCase().includes(text) ||
        (product.summary ?? '').toLowerCase().includes(text) ||
        product.slug.toLowerCase().includes(text)
      );
    });
  }, [products, search]);

  const selected = useMemo(() => {
    if (!filtered.length) {
      return null;
    }
    const slug = selectedSlug ?? filtered[0]?.slug;
    return filtered.find((product) => product.slug === slug) ?? filtered[0];
  }, [filtered, selectedSlug]);

  const transitionMutation = useMutation<SubscriptionTransitionResponse, ApiError>({
    mutationFn: async () => {
      if (!selected) {
        throw new ApiError('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç', 422);
      }
      const body = {
        product_id: selected.id,
        version_id: selected.versions[0]?.id ?? null,
        tariff_id: selected.tariffs[0]?.id ?? null,
        transition_type: transitionType,
        activation_source: 'crm-products-module',
        metadata: { initiated_by: 'crm-ui' },
        area_id: selected.area_id,
        project_id: selected.project_id,
        web_user_id: webUserId ? Number(webUserId) : null,
        email: email || null,
        phone: phone || null,
        full_name: fullName || null,
      };
      return apiFetch<SubscriptionTransitionResponse>('/api/v1/crm/subscriptions/transition', {
        method: 'POST',
        body: JSON.stringify(body),
      });
    },
  });

  const transitionMessage = transitionMutation.data
    ? `–ü–æ–¥–ø–∏—Å–∫–∞ #${transitionMutation.data.subscription_id} ‚Üí —Å—Ç–∞—Ç—É—Å ${transitionMutation.data.status}`
    : transitionMutation.error?.message;

  return (
    <PageLayout title={MODULE_TITLE} description={MODULE_DESCRIPTION} contentClassName="flex flex-col gap-6">
      <Toolbar className="flex-col items-start gap-3 lg:flex-row lg:items-center lg:justify-between">
        <Field label="–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É" className="w-full lg:max-w-sm">
          <Input
            type="search"
            placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Å–ª–∞–≥"
            value={search}
            onChange={(event) => setSearch(event.target.value)}
          />
        </Field>
        <div className="flex items-center gap-3 text-sm text-muted">
          <span>–í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {products.length}</span>
          <TermHint
            label="PARA —Å–≤—è–∑–∫–∞"
            description="–ö–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –Ω–∞—Å–ª–µ–¥—É–µ—Ç Area/Project. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –∑–∞–º–µ—Ç–∫–∞–º–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è."
          />
        </div>
      </Toolbar>

      {productsQuery.isLoading ? (
        <div className="grid gap-4 lg:grid-cols-3">
          {Array.from({ length: 6 }).map((_, index) => (
            <Card key={index} className="h-40 animate-pulse bg-surface-soft" />
          ))}
        </div>
      ) : filtered.length === 0 ? (
        <EmptyState
          icon="üì¶"
          title="–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç"
          description="–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π seed –∏–ª–∏ —Ñ–æ—Ä–º—É CRM."
        />
      ) : (
        <div className="flex flex-col gap-6 lg:flex-row">
          <Card className="w-full flex-1 space-y-3 lg:max-w-xs">
            <header className="space-y-1">
              <h2 className="text-base font-semibold text-[var(--text-primary)]">–ü—Ä–æ–¥—É–∫—Ç—ã</h2>
              <p className="text-sm text-muted">
                –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π Intelligent Data Pro. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã, –ø–æ—Ç–æ–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã.
              </p>
            </header>
            <div className="space-y-2">
              {filtered.map((product) => {
                const isSelected = selected?.slug === product.slug;
                return (
                  <button
                    key={product.slug}
                    type="button"
                    onClick={() => setSelectedSlug(product.slug)}
                    className={`w-full rounded-xl border px-3 py-2 text-left transition-base ${
                      isSelected
                        ? 'border-[var(--accent-primary)] bg-[var(--surface-soft)]'
                        : 'border-subtle hover:border-[var(--accent-primary)] hover:bg-[var(--surface-1)]'
                    }`}
                  >
                    <div className="flex items-start justify-between gap-2">
                      <span className="text-sm font-semibold text-[var(--text-primary)]">{product.title}</span>
                      {!product.is_active ? (
                        <span className="rounded-full bg-surface-soft px-2 py-0.5 text-xs text-muted">–∞—Ä—Ö–∏–≤</span>
                      ) : null}
                    </div>
                    {product.summary ? <p className="mt-1 text-xs text-muted">{product.summary}</p> : null}
                    <code className="mt-2 inline-flex rounded bg-surface-soft px-2 py-0.5 text-[0.7rem] text-muted">{product.slug}</code>
                  </button>
                );
              })}
            </div>
          </Card>

          {selected ? (
            <div className="flex w-full flex-1 flex-col gap-6">
              <Card className="space-y-3">
                <header className="space-y-1">
                  <h2 className="text-lg font-semibold text-[var(--text-primary)]">{selected.title}</h2>
                  {selected.summary ? <p className="text-sm text-muted">{selected.summary}</p> : null}
                </header>
                <div className="grid gap-3 sm:grid-cols-2">
                  <div>
                    <span className="text-xs uppercase text-muted">–í–∏–¥ –ø—Ä–æ–¥—É–∫—Ç–∞</span>
                    <p className="text-sm text-[var(--text-primary)]">{selected.kind}</p>
                  </div>
                  <div>
                    <span className="text-xs uppercase text-muted">PARA</span>
                    <p className="text-sm text-[var(--text-primary)]">
                      {selected.project_id ? `Project #${selected.project_id}` : selected.area_id ? `Area #${selected.area_id}` : '–ù–µ –∑–∞–¥–∞–Ω–æ'}
                    </p>
                  </div>
                </div>
              </Card>

              <Card className="space-y-4">
                <header className="flex items-center justify-between gap-2">
                  <div>
                    <h3 className="text-base font-semibold text-[var(--text-primary)]">–ü–æ—Ç–æ–∫–∏ –∏ –≤–µ—Ä—Å–∏–∏</h3>
                    <p className="text-sm text-muted">–û—Ç—Ä–∞–∂–∞—é—Ç –Ω–∞–±–æ—Ä—ã –∑–∞–ø—É—Å–∫–æ–≤: –∫–æ–≥–æ—Ä—Ç—ã –∫—É—Ä—Å–æ–≤, —Ä–µ–ª–∏–∑—ã –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ –≤–µ—Ä—Å–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.</p>
                  </div>
                  <TermHint
                    label="Pricing mode"
                    description="cohort ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏, rolling ‚Äî –ø–æ—Ç–æ–∫–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã, perpetual ‚Äî –±–µ—Å—Å—Ä–æ—á–Ω—ã–π –¥–æ—Å—Ç—É–ø."
                  />
                </header>
                {selected.versions.length === 0 ? (
                  <EmptyState
                    icon="üöÄ"
                    title="–ù–µ—Ç –ø–æ—Ç–æ–∫–æ–≤"
                    description="–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –≤–µ—Ä—Å–∏—é –∫—É—Ä—Å–∞ –∏–ª–∏ —Ä–µ–ª–∏–∑ —á–µ—Ä–µ–∑ API /crm/products."
                  />
                ) : (
                  <div className="space-y-3">
                    {selected.versions.map((version) => (
                      <div key={version.id} className="rounded-xl border border-subtle p-3">
                        <div className="flex flex-wrap items-center justify-between gap-2">
                          <div>
                            <h4 className="text-sm font-semibold text-[var(--text-primary)]">{version.title}</h4>
                            <p className="text-xs text-muted">{version.slug}</p>
                          </div>
                          <span className="rounded-full bg-surface-soft px-2 py-0.5 text-xs text-muted">{version.pricing_mode}</span>
                        </div>
                        <dl className="mt-2 grid gap-2 text-xs text-muted sm:grid-cols-3">
                          <div>
                            <dt className="font-medium text-[var(--text-primary)]">–°—Ç–∞—Ä—Ç</dt>
                            <dd>{formatDate(version.starts_at)}</dd>
                          </div>
                          <div>
                            <dt className="font-medium text-[var(--text-primary)]">–§–∏–Ω–∏—à</dt>
                            <dd>{formatDate(version.ends_at)}</dd>
                          </div>
                          <div>
                            <dt className="font-medium text-[var(--text-primary)]">–õ–∏–º–∏—Ç –º–µ—Å—Ç</dt>
                            <dd>{version.seats_limit ?? '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}</dd>
                          </div>
                        </dl>
                      </div>
                    ))}
                  </div>
                )}
              </Card>

              <Card className="space-y-4">
                <header className="flex items-center justify-between gap-2">
                  <div>
                    <h3 className="text-base font-semibold text-[var(--text-primary)]">–¢–∞—Ä–∏—Ñ—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã</h3>
                    <p className="text-sm text-muted">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏.</p>
                  </div>
                  <TermHint
                    label="–ü–µ—Ä–µ—Ö–æ–¥—ã"
                    description="–î–ª—è –∞–ø–≥—Ä–µ–π–¥–∞/–¥–∞—É–Ω–≥—Ä–µ–π–¥–∞ —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª–µ CRM."
                  />
                </header>
                {selected.tariffs.length === 0 ? (
                  <EmptyState
                    icon="üí≥"
                    title="–¢–∞—Ä–∏—Ñ—ã –Ω–µ –∑–∞–¥–∞–Ω—ã"
                    description="–ó–∞–≤–µ–¥–∏—Ç–µ —Ç–∞—Ä–∏—Ñ—ã —á–µ—Ä–µ–∑ API /crm/products ‚Äî —ç—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø–ª–∞—Ç–æ–π –∏ –∞–ø–≥—Ä–µ–π–¥–∞–º–∏."
                  />
                ) : (
                  <div className="space-y-3">
                    {selected.tariffs.map((tariff) => (
                      <div key={tariff.id} className="rounded-xl border border-subtle p-3">
                        <div className="flex flex-wrap items-center justify-between gap-2">
                          <div>
                            <h4 className="text-sm font-semibold text-[var(--text-primary)]">{tariff.title}</h4>
                            <p className="text-xs text-muted">{tariff.slug}</p>
                          </div>
                          <span className="rounded-full bg-surface-soft px-2 py-0.5 text-xs text-muted">
                            {tariff.billing_type}
                          </span>
                        </div>
                        <p className="mt-2 text-sm text-[var(--text-primary)]">
                          {tariff.amount ? `${tariff.amount} ${tariff.currency}` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}
                        </p>
                      </div>
                    ))}
                  </div>
                )}

                <form
                  className="mt-4 grid gap-3 md:grid-cols-2"
                  onSubmit={(event) => {
                    event.preventDefault();
                    transitionMutation.mutate();
                  }}
                >
                  <Field label="–¢–∏–ø –ø–µ—Ä–µ—Ö–æ–¥–∞" className="md:col-span-2">
                    <Select value={transitionType} onChange={(event) => setTransitionType(event.target.value as typeof transitionType)}>
                      <option value="free">{TRANSITION_LABELS.free}</option>
                      <option value="upgrade">{TRANSITION_LABELS.upgrade}</option>
                      <option value="downgrade">{TRANSITION_LABELS.downgrade}</option>
                    </Select>
                  </Field>
                  <Field label="web_user_id">
                    <Input value={webUserId} onChange={(event) => setWebUserId(event.target.value)} placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 42" />
                  </Field>
                  <Field label="Email">
                    <Input type="email" value={email} onChange={(event) => setEmail(event.target.value)} placeholder="client@example.com" />
                  </Field>
                  <Field label="–¢–µ–ª–µ—Ñ–æ–Ω">
                    <Input value={phone} onChange={(event) => setPhone(event.target.value)} placeholder="+71234567890" />
                  </Field>
                  <Field label="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞">
                    <Input value={fullName} onChange={(event) => setFullName(event.target.value)} placeholder="–ò–º—è –§–∞–º–∏–ª–∏—è" />
                  </Field>
                  <div className="md:col-span-2 flex flex-col gap-2">
                    <Button type="submit" disabled={transitionMutation.isPending}>
                      {transitionMutation.isPending ? '–°–æ—Ö—Ä–∞–Ω—è–µ–º‚Ä¶' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥'}
                    </Button>
                    {transitionMessage ? (
                      <p className={`text-sm ${transitionMutation.error ? 'text-red-600' : 'text-[var(--accent-primary)]'}`}>
                        {transitionMessage}
                      </p>
                    ) : null}
                    <p className="text-xs text-muted">
                      –ï—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω web_user_id ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ. –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ email/—Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ users_web.
                    </p>
                  </div>
                </form>
              </Card>
            </div>
          ) : null}
        </div>
      )}
    </PageLayout>
  );
}
