# /sd/intdata/bot/handlers/telegram.py
import re

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, date
from typing import Callable
from decorators import role_required, group_required
from core.models import GroupType, LogLevel, UserRole
from core.services.telegram_user_service import TelegramUserService

# ==============================
# –†–û–£–¢–ï–†–´
# ==============================
router = Router()
user_router = Router()
group_router = Router()

# -----------------------------
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------

async def process_data_input(
    message: Message,
    state: FSMContext,
    validation_func: Callable,
    update_method: Callable,
    success_msg: str,
    error_msg: str
):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ FSM"""
    data = message.text.strip()
    if not validation_func(data):
        await message.answer(error_msg)
        return

    async with TelegramUserService() as user_service:
        success = await update_method(user_service, message.from_user.id, data)

    if success:
        await message.answer(success_msg.format(data=data))
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    await state.clear()

# -----------------------------
# –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
# -----------------------------

def validate_email(email: str) -> bool:
    return "@" in email and "." in email.split("@")[-1]

def validate_phone(phone: str) -> bool:
    return phone.startswith("+") and phone[1:].isdigit()

def validate_birthday(date_str: str) -> bool:
    try:
        datetime.strptime(date_str, "%d.%m.%Y")
        return True
    except ValueError:
        return False

def validate_group_description(desc: str) -> bool:
    return len(desc) <= 500

def validate_fullname(name: str) -> bool:
    return 0 < len(name) <= 255

# -----------------------------
# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
# -----------------------------

class UpdateDataStates(StatesGroup):
    waiting_for_birthday = State()
    waiting_for_email = State()
    waiting_for_fullname = State()
    waiting_for_phone = State()
    waiting_for_group_description = State()

# -----------------------------
# –ö–æ–º–∞–Ω–¥—ã
# -----------------------------
@router.message(Command("start"))
@user_router.message(F.text.lower().in_(["—Å—Ç–∞—Ä—Ç", "start", "–ø—Ä–∏–≤–µ—Ç", "hello"]))
async def cmd_start(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞.")


@user_router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "\n"
        "–û–±—â–∏–µ:\n"
        "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞.\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥.\n"
        "\n"
        "–ü—Ä–æ—Ñ–∏–ª—å:\n"
        "/contact - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
        "/setfullname - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è.\n"
        "/setemail - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å email.\n"
        "/setphone - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω.\n"
        "/setbirthday - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è.\n"
        "/birthday - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è.\n"
        "\n"
        "–ó–∞–º–µ—Ç–∫–∏:\n"
        "/note <—Ç–µ–∫—Å—Ç> - —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ Inbox (#proj:<id> –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞).\n"
        "/assign <note_id> <proj|area|res> <id> - –ø—Ä–∏—Å–≤–æ–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É.\n"
        "\n"
        "–ü—Ä–∏–≤—ã—á–∫–∏:\n"
        "/habit_list - —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫.\n"
        "/habit_add [–Ω–∞–∑–≤–∞–Ω–∏–µ] [daily|weekly|monthly] - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É.\n"
        "/habit_done [id] - –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
        "\n"
        "–¢–∞–π–º-—Ç—Ä–µ–∫–µ—Ä:\n"
        "/time_start [–æ–ø–∏—Å–∞–Ω–∏–µ] - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä.\n"
        "/time_stop [id] - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä.\n"
        "/time_list - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏.\n"
        "/time_resume <task_id> - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–∞—á–∏.\n"
        "\n"
        "–ì—Ä—É–ø–ø—ã:\n"
        "/group - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
        "/setgroupdesc - –∑–∞–¥–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–≤ –≥—Ä—É–ø–ø–∞—Ö).\n"
        "\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        "/setloglevel <DEBUG|INFO|ERROR> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
        "/getloglevel - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤."
    )
    await message.answer(help_text)

@user_router.message(Command("cancel"))
@user_router.message(F.text.lower().in_(["cancel", "–æ—Ç–º–µ–Ω–∞", "–≤—ã–π—Ç–∏", "–ø—Ä–µ—Ä–≤–∞—Ç—å"]))
async def cmd_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        await message.answer(f"{message.from_user.first_name}, –≤–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.")
    else:
        await message.answer(f"{message.from_user.first_name}, –≤—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞.")

@user_router.message(Command("birthday"))
@user_router.message(F.text.lower() == "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ")
async def cmd_birthday(message: Message, state: FSMContext):
    birthday = None
    async with TelegramUserService() as user_service:
        user_db = await user_service.get_user_by_telegram_id(message.from_user.id)
        birthday_raw = (
            user_db.bot_settings.get("birthday")
            if user_db and isinstance(user_db.bot_settings, dict)
            else None
        )
        if isinstance(birthday_raw, str):
            try:
                birthday = datetime.strptime(birthday_raw, "%d.%m.%Y").date()
            except ValueError:
                birthday = None
        elif isinstance(birthday_raw, date):
            birthday = birthday_raw

    if birthday:
        today = datetime.today().date()
        this_year_birthday = birthday.replace(year=today.year)
        if this_year_birthday < today:
            this_year_birthday = this_year_birthday.replace(year=today.year + 1)
        days_left = (this_year_birthday - today).days
        if days_left == 0:
            await message.answer(
                f"{message.from_user.first_name}, —Å–µ–≥–æ–¥–Ω—è –≤–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! üéâ ({birthday.strftime('%d.%m.%Y')})"
            )
        else:
            await message.answer(
                f"{message.from_user.first_name}, –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π ({birthday.strftime('%d.%m.%Y')})"
            )
        return

    await message.answer(
        f"{message.from_user.first_name}, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
    )
    await state.set_state(UpdateDataStates.waiting_for_birthday)

@user_router.message(Command("contact"))
@user_router.message(F.text.lower().in_(["–∫–æ–Ω—Ç–∞–∫—Ç", "–ø—Ä–æ—Ñ–∏–ª—å"]))
async def cmd_contact(message: Message):
    async with TelegramUserService() as user_service:
        info = await user_service.get_contact_info(message.from_user.id)

    if not info:
        await message.answer(
            f"{message.from_user.first_name}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
        )
        return

    name = (
        info.get("full_display_name")
        or f"{info.get('first_name') or ''} {info.get('last_name') or ''}".strip()
        or message.from_user.first_name
    )

    fields = {
        "Telegram ID": info["telegram_id"],
        "Username": info.get("username"),
        "–ò–º—è": name,
        "Email": info.get("email"),
        "–¢–µ–ª–µ—Ñ–æ–Ω": info.get("phone"),
        "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è": info.get("birthday"),
    }

    lines = [f"{name}, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"]
    for label, value in fields.items():
        if value:
            lines.append(f"{label}: {value}")

    lines.append("")
    lines.append("–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
    lines.append("/setfullname - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è")
    lines.append("/setemail - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å email")
    lines.append("/setphone - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω")
    lines.append("/setbirthday - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è")

    await message.answer("\n".join(lines))


@user_router.message(Command("setfullname"))
async def cmd_set_fullname(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è:")
    await state.set_state(UpdateDataStates.waiting_for_fullname)


@user_router.message(UpdateDataStates.waiting_for_fullname)
async def process_fullname(message: Message, state: FSMContext):
    await process_data_input(
        message,
        state,
        validate_fullname,
        lambda svc, user_id, data: svc.update_bot_setting(user_id, "full_display_name", data),
        "–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {data}",
        "–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏ –¥–ª–∏–Ω–Ω–µ–µ 255 —Å–∏–º–≤–æ–ª–æ–≤",
    )


@user_router.message(Command("setemail"))
async def cmd_set_email(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email:")
    await state.set_state(UpdateDataStates.waiting_for_email)


@user_router.message(UpdateDataStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    await process_data_input(
        message,
        state,
        validate_email,
        lambda svc, user_id, data: svc.update_bot_setting(user_id, "email", data),
        "Email –æ–±–Ω–æ–≤–ª—ë–Ω: {data}",
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email",
    )


@user_router.message(Command("setphone"))
async def cmd_set_phone(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +1234567890:")
    await state.set_state(UpdateDataStates.waiting_for_phone)


@user_router.message(UpdateDataStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    await process_data_input(
        message,
        state,
        validate_phone,
        lambda svc, user_id, data: svc.update_bot_setting(user_id, "phone", data),
        "–¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω: {data}",
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    )


@user_router.message(Command("setbirthday"))
async def cmd_set_birthday(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(UpdateDataStates.waiting_for_birthday)


@user_router.message(UpdateDataStates.waiting_for_birthday)
async def process_birthday_input(message: Message, state: FSMContext):
    await process_data_input(
        message,
        state,
        validate_birthday,
        lambda svc, user_id, data: svc.update_bot_setting(user_id, "birthday", data),
        "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {data}",
        "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì",
    )

# -----------------------------
# –ì—Ä—É–ø–ø—ã
# -----------------------------

@group_router.message(Command("group"))
@group_router.message(F.text.lower().in_(["–≥—Ä—É–ø–ø–∞", "group"]))
async def cmd_group(message: Message):
    async with TelegramUserService() as user_service:
        chat = message.chat
        chat_title = chat.title or f"{message.from_user.first_name} –≥—Ä—É–ø–ø–∞"
        group = await user_service.get_group_by_telegram_id(chat.id)
        if not group:
            group = await user_service.create_group(
                telegram_id=chat.id,
                title=chat.title or chat_title,
                type=GroupType(chat.type.lower()),
                owner_id=message.from_user.id
            )
            await message.answer(f"–ì—Ä—É–ø–ø–∞ '{chat_title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î. –í—ã ‚Äî –µ—ë —Å–æ–∑–¥–∞—Ç–µ–ª—å.")
            return
        is_member = await user_service.is_user_in_group(message.from_user.id, chat.id)
        if not is_member:
            success, response = await user_service.add_user_to_group(message.from_user.id, chat.id)
            await message.answer(response if success else f"–û—à–∏–±–∫–∞: {response}")
            return
        members = await user_service.get_group_members(chat.id)
        if members:
            member_list = "\n".join(
                [
                    (
                        m.bot_settings.get("full_display_name")
                        if isinstance(m.bot_settings, dict)
                        and m.bot_settings.get("full_display_name")
                        else f"{m.first_name} {m.last_name or ''}".strip()
                    )
                    for m in members
                ]
            )
            await message.answer(
                f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã '{chat_title}':\n{member_list}"
            )
        else:
            await message.answer("–ì—Ä—É–ø–ø–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")


@group_router.message(Command("setgroupdesc"))
async def cmd_set_group_desc(message: Message, state: FSMContext):
    if message.chat.type not in {"group", "supergroup"}:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
        return
    async with TelegramUserService() as user_service:
        await user_service.get_or_create_group(
            message.chat.id,
            title=message.chat.title,
            type=GroupType(message.chat.type.lower()),
            owner_id=message.from_user.id,
        )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(UpdateDataStates.waiting_for_group_description)


@group_router.message(UpdateDataStates.waiting_for_group_description)
async def process_group_desc(message: Message, state: FSMContext):
    if message.chat.type not in {"group", "supergroup"}:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
        await state.clear()
        return
    await process_data_input(
        message,
        state,
        validate_group_description,
        lambda svc, _uid, data: svc.update_group_description(message.chat.id, data),
        "–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {data}",
        "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤",
    )

# -----------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------

@user_router.message(Command("setloglevel"))
@role_required(UserRole.admin)  # –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def cmd_set_log_level(message: Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setloglevel [level]")
        return
    level = parts[1].upper()
    if level not in ["DEBUG", "INFO", "ERROR"]:
        await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ DEBUG, INFO –∏–ª–∏ ERROR")
        return
    async with TelegramUserService() as user_service:
        # ``LogLevel`` —Ç–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ ``IntEnum``, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
        # —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∏–º—è —É—Ä–æ–≤–Ω—è —á–µ—Ä–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É.
        success = await user_service.update_log_level(
            LogLevel[level], chat_id=message.chat.id
        )
        if success:
            await message.answer(f"–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {level}")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")

@user_router.message(Command("getloglevel"))
async def cmd_get_log_level(message: Message):
    async with TelegramUserService() as user_service:
        log_settings = await user_service.get_log_settings()
        current_level = log_settings.level if log_settings else LogLevel.ERROR
        chat_id = log_settings.chat_id if log_settings else "–Ω–µ –∑–∞–¥–∞–Ω"
        await message.answer(f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {current_level}\n–ì—Ä—É–ø–ø–∞ –¥–ª—è –ª–æ–≥–æ–≤: {chat_id}")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä (–ª–æ–≤–∏—Ç –≤—Å—ë, —á—Ç–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ –≤—ã—à–µ)
forward_map: dict[int, tuple[int, int]] = {}

@router.message()
async def unknown_message_handler(message: Message) -> None:
    async with TelegramUserService() as user_service:
        settings = await user_service.get_log_settings()
        log_chat_id = settings.chat_id if settings else None

    if not log_chat_id or message.chat.id == log_chat_id:
        return

    try:
        from core.db import bot

        meta_text = (
            f"||origin_chat_id:{message.chat.id}|origin_msg_id:{message.message_id}||"
        )
        fwd_msg = await message.forward(log_chat_id)
        forward_map[fwd_msg.message_id] = (message.chat.id, message.message_id)
        await bot.send_message(
            log_chat_id,
            meta_text,
            parse_mode=None,
            reply_to_message_id=fwd_msg.message_id,
        )
    except Exception as e:  # pragma: no cover - defensive
        print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


@router.message()
async def handle_admin_reply(message: Message) -> None:
    async with TelegramUserService() as user_service:
        settings = await user_service.get_log_settings()
        log_chat_id = settings.chat_id if settings else None

    if not log_chat_id or message.chat.id != log_chat_id or not message.reply_to_message:
        return

    from core.db import bot
    from aiogram.exceptions import TelegramAPIError
    from core.logger import logger

    origin = forward_map.get(message.reply_to_message.message_id)

    if not origin:
        meta_match = re.search(
            r"\|\|origin_chat_id:(-?\d+)\|origin_msg_id:(\d+)\|\|",
            message.reply_to_message.text or "",
        )
        if not meta_match and message.reply_to_message.reply_to_message:
            meta_match = re.search(
                r"\|\|origin_chat_id:(-?\d+)\|origin_msg_id:(\d+)\|\|",
                message.reply_to_message.reply_to_message.text or "",
            )
        if meta_match:
            origin = (int(meta_match.group(1)), int(meta_match.group(2)))

    if not origin:
        return

    origin_chat_id, origin_msg_id = origin

    try:
        await bot.copy_message(
            origin_chat_id,
            message.chat.id,
            message.message_id,
            reply_to_message_id=origin_msg_id,
        )
    except TelegramAPIError as e:  # pragma: no cover - defensive
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
